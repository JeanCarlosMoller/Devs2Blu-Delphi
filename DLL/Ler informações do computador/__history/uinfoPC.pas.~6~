unit uinfoPC;

interface

uses
  Windows, SysUtils;

type
  TInfoPC = class
    public
    class function ComputerName: String;
    class function UserName: String;
    class function SystemDiretory: String;
    class function WindowsDiretory: String;
    class function TempPath: String;
    class function VersionEx: String;
  end;

implementation


{ TInfoPC }

class function TInfoPC.ComputerName: String;
var
  Buffer: Array[0..255] of Char;
  I: DWord;
begin
  I := SizeOf(Buffer);
  GetComputerName(Buffer, I);
  Result := StrPas(Buffer);
end;

class function TInfoPC.SystemDiretory: String;
var
  Buffer: Array[0..255] of Char;
begin
  GetSystemDirectory(Buffer, 255);
  Result := StrPas(Buffer);
end;

class function TInfoPC.TempPath: String;
var
  Buffer: Array[0..255] of Char;
begin
  GetTempPath(255, Buffer);
  Result := StrPas(Buffer);

end;

class function TInfoPC.UserName: String;
var
  Buffer: Array[0..255] of Char;
  I: DWord;
begin
  I := SizeOf(Buffer);
  GetUserName(Buffer, I);
  Result := StrPas(Buffer);
end;

class function TInfoPC.VersionEx: String;
var
  VersionInfo: TOSVersionInfo;
begin
  VersionInfo.dwOSVersionInfoSize := SizeOf(VersionInfo);

  GetVersionEx(VersionInfo);

  case VersionInfo.dwPlatformId of
    0:
      Result := 'Windows 3.11';
    1:
    begin
      case VersionInfo.dwMinorVersion of
        0:
          Result := 'Windows 95';
          10:
          begin
            if (VersionInfo.szCSDVersion[1] = 'A') then
              Result := 'Windows 98 SE'
            else
              Result := 'Windows 98';
          end;
          90:

      end;
    end;
  end;

end;

class function TInfoPC.WindowsDiretory: String;
begin

end;

end.
